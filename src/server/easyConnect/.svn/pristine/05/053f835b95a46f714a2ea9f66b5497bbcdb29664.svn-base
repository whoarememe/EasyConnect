var webpack = require("webpack");
var proxy = require("http-proxy-middleware"); //代理模组
var ExtractTextPlugin = require('extract-text-webpack-plugin');

module.exports = {
	resolve: {
		alias: {
		  'vue$': 'vue/dist/vue.esm.js' // 'vue/dist/vue.common.js' for webpack 1
		}
  	},
	// devServer: {
		// 请求代理
		// proxy: {
		// 	// 这里可以匹配多个方法，
		// 	// 至于方法怎么调用，不用写localhost:8081,如下面我说的方法，在调用的时候，url直接写'/fanghh/getIdXXX'
		// 	'/performance/*': { //这里将相应的匹配项更换为方法名的匹配，如方法为“./fanghh/getIdXXXXX”，那就"fanghh"
		// 		target: 'http://222.194.15.118:6888', //这里更改你的相应的端口，如后端端口在8081，就改成8081
		// 		secure: false
		// 	}
		// 	// ,'/fanghh/*': {  //这里将相应的匹配项更换为方法名的匹配，如方法为“./fanghh/getIdXXXXX”，那就"fanghh"
		// 	// 	target: 'http://localhost:9090',    //这里更改你的相应的端口，如后端端口在8081，就改成8081
		// 	// 	secure: false
		// 	// }
		// },
	// 	stats: {
	// 		colors: true
	// 	}
	// },
	entry: [
		'./management/js/adddevice.js'
	],
	output: {
		path: __dirname + "/management/dist/",
		// publicPath: '/bundlea/',
		filename: "js/[name].js"
	},
	module: {
		loaders: [
		{
			test: /\.js$/,
        	// 通过babel转换
        	loader: 'babel-loader',
        	// 不用转换的node_modules文件夹
        	exclude: /node_modules/
        },

		{
            test: /\.scss$/,
            loader: 'style-loader!css-loader!sass-loader'
        },

		{
			test: /\.(png|jpg|gif)$/,
			exclude: /(node_modules|bower_components)/,
			loader: "url-loader?limit=8192&name=img/[name].[ext]"//这里代表了编译后存放的位置和文件名
		}, {
			test: /\.woff$/,
			loader: "url-loader?limit=10000&mimetype=application/font-woff&name=fonts/[name].[ext]",
			options: {
				publicPath: 'abceee/'
			}
		}, {
			test: /\.ttf$/,
			loader: "url-loader?limit=10000&mimetype=application/octet-stream&name=fonts/[name].[ext]",
			options: {
				publicPath: '/'
			}
		}, {
			test: /\.eot$/,
			loader: "file-loader?name=fonts/[name].[ext]"
		},

		{
			test: /\.svg$/,
			loader: "url-loader?limit=10000&mimetype=image/svg+xml&name=fonts/[name].[ext]"
		}, 

		{
			test: /\.html$/,
			loader: "html-withimg-loader"
		},

		{
		    test: require.resolve('jquery'),
		    loader: 'expose-loader?$!expose-loader?jQuery', // 先把jQuery对象声明成为全局变量`jQuery`，再通过管道进一步又声明成为全局变量`$`
		}]
	},
	plugins: [
		new webpack.ProvidePlugin({
            $: 'jquery',
            jQuery: 'jquery',
            'window.jQuery': 'jquery',
            'window.$': 'jquery'
        })
	]
};
